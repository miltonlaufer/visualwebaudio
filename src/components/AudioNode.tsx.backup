import React, { useState, useCallback, useRef, useEffect } from 'react'
import { Handle, Position, useNodeId } from '@xyflow/react'
import type { VisualNodeData } from '~/types'
import { useAudioGraphStore } from '~/stores/AudioGraphStore'

interface AudioNodeProps {
  data: VisualNodeData
  selected?: boolean
}

const AudioNode: React.FC<AudioNodeProps> = ({ data, selected }) => {
  console.log('AudioNode rendering:', data.nodeType)
  
  const store = useAudioGraphStore()
  const nodeId = useNodeId() // Get the node ID from React Flow
  const [hoveredHandle, setHoveredHandle] = useState<string | null>(null)
  const [isConnecting, setIsConnecting] = useState(false)
  const customUIRef = useRef<HTMLDivElement>(null)

  const { metadata, nodeType, properties } = data

  // Check if this is a custom node type
  const customNodeTypes = [
    'ButtonNode', 'SliderNode', 'GreaterThanNode', 'EqualsNode', 
    'SelectNode', 'MidiInputNode', 'MidiToFreqNode', 'DisplayNode', 'SoundFileNode'
  ]
  const isCustomNode = customNodeTypes.includes(nodeType)

  // Initialize custom UI elements for custom nodes
  useEffect(() => {
    console.log(`AudioNode useEffect: isCustomNode=${isCustomNode}, nodeId=${nodeId}, nodeType=${data.nodeType}`); if (isCustomNode && customUIRef.current && nodeId) {
      // Get the unified node from the store
      const customNode = store.customNodes.get(nodeId)
      if (customNode && 'createUIElement' in customNode && typeof customNode.createUIElement === 'function') {
        // Clear any existing content
        customUIRef.current.innerHTML = ''
        // Create the custom UI elements
        customNode.createUIElement(customUIRef.current)
      }
    }
  }, [isCustomNode, nodeId, store.customNodes, data.nodeType])

  // Memoized handlers for better performance
  const handleMouseEnterHandle = useCallback((handleId: string) => {
    return () => setHoveredHandle(handleId)
  }, [])

  const handleMouseLeaveHandle = useCallback(() => {
    setHoveredHandle(null)
  }, [])

  const handleMouseEnterNode = useCallback(() => {
    setIsConnecting(true)
  }, [])

  const handleMouseLeaveNode = useCallback(() => {
    setIsConnecting(false)
  }, [])

  // Helper function to safely get property value whether properties is a Map or object
  const getPropertyValue = (properties: unknown, propertyName: string): unknown => {
    if (!properties) return undefined

    // Check if it's a MobX State Tree Map or regular Map with .get method
    if (typeof (properties as any).get === 'function') {
      return (properties as any).get(propertyName)
    } else if (typeof properties === 'object') {
      return (properties as Record<string, unknown>)[propertyName]
    }
    return undefined
  }

  // Error handling
  if (!metadata) {
    console.error('AudioNode: metadata is undefined for nodeType:', nodeType)
    return (
      <div className="min-w-32 p-3 rounded-lg shadow-md border-2 bg-red-100 border-red-300">
        <div className="text-sm font-semibold text-red-800">Error: No metadata</div>
        <div className="text-xs text-red-600">{nodeType}</div>
      </div>
    )
  }

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'source':
        return 'bg-green-100 border-green-300'
      case 'effect':
        return 'bg-blue-100 border-blue-300'
      case 'destination':
        return 'bg-red-100 border-red-300'
      case 'analysis':
        return 'bg-purple-100 border-purple-300'
      case 'processing':
        return 'bg-yellow-100 border-yellow-300'
      case 'context':
        return 'bg-gray-100 border-gray-300'
      // Custom node categories
      case 'control':
        return 'bg-pink-100 border-pink-300'
      case 'logic':
        return 'bg-indigo-100 border-indigo-300'
      case 'input':
        return 'bg-teal-100 border-teal-300'
      case 'utility':
        return 'bg-orange-100 border-orange-300'
      default:
        return 'bg-white border-gray-300'
    }
  }

  const getHandleColors = (type: string) => {
    if (type === 'audio') {
      return {
        backgroundColor: '#059669', // emerald-600 (darker green)
        borderColor: '#047857', // emerald-700 (even darker border)
        labelColor: 'text-emerald-800',
        badgeColor: 'bg-emerald-100 text-emerald-800',
      }
    } else {
      return {
        backgroundColor: '#dc2626', // red-600 (distinct red for control)
        borderColor: '#b91c1c', // red-700 (darker red border)
        labelColor: 'text-red-800',
        badgeColor: 'bg-red-100 text-red-800',
      }
    }
  }

  // Calculate node height based on content
  const maxHandles = Math.max(metadata.inputs.length, metadata.outputs.length)
  const baseHeight = isCustomNode ? 120 : 80 // More height for custom nodes with UI
  const handleHeight = maxHandles * 30 // 30px per handle
  const nodeHeight = Math.max(baseHeight, handleHeight + 40) // Ensure minimum height

  const handleSliderChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value)
    setSliderValue(value)
    console.log('üéöÔ∏è Slider changed to:', value, 'for node:', nodeId)
    
    // Use the store's updateNodeProperty method to properly update the audio node
    store.updateNodeProperty(nodeId, 'value', value)
  }, [nodeId, store])

  return (
    <div
      className={`
        relative min-w-48 p-3 rounded-lg shadow-md border-2 flex flex-col items-center justify-center
        ${getCategoryColor(metadata.category)}
        ${selected ? 'ring-2 ring-blue-500' : ''}
      `}
      style={{ minHeight: `${nodeHeight}px` }}
      onMouseEnter={handleMouseEnterNode}
      onMouseLeave={handleMouseLeaveNode}
    >
      {/* Input Handles and Labels */}
      {metadata.inputs.map((input: any, index: number) => {
        const colors = getHandleColors(input.type)
        const topPosition = 35 + index * 30
        const handleId = `input-${input.name}`
        const showLabel = hoveredHandle === handleId || isConnecting

        return (
          <div key={handleId} className="absolute left-0" style={{ top: `${topPosition}px` }}>
            <Handle
              type="target"
              position={Position.Left}
              id={input.name}
              data-handletype={input.type}
              style={{
                backgroundColor: colors.backgroundColor,
                border: `2px solid ${colors.borderColor}`,
                width: '14px',
                height: '14px',
                left: '-7px',
                zIndex: 10,
              }}
              title={`${input.name} (${input.type})`}
              onMouseEnter={handleMouseEnterHandle(handleId)}
              onMouseLeave={handleMouseLeaveHandle}
            />
            {/* Input Label - Only show on hover or when connecting */}
            {showLabel && (
              <div className="absolute left-2 top-1/2 transform -translate-y-1/2 flex items-center pointer-events-none z-20">
                <span
                  className={`text-xs font-medium ${colors.labelColor} bg-white px-1 rounded shadow-sm`}
                >
                  {input.name}
                </span>
              </div>
            )}
          </div>
        )
      })}

      {/* Output Handles and Labels */}
      {metadata.outputs.map((output: any, index: number) => {
        const colors = getHandleColors(output.type)
        const topPosition = 35 + index * 30
        const handleId = `output-${output.name}`
        const showLabel = hoveredHandle === handleId || isConnecting

        return (
          <div key={handleId} className="absolute right-0" style={{ top: `${topPosition}px` }}>
            <Handle
              type="source"
              position={Position.Right}
              id={output.name}
              data-handletype={output.type}
              style={{
                backgroundColor: colors.backgroundColor,
                border: `2px solid ${colors.borderColor}`,
                width: '14px',
                height: '14px',
                right: '-7px',
                zIndex: 10,
              }}
              title={`${output.name} (${output.type})`}
              onMouseEnter={handleMouseEnterHandle(handleId)}
              onMouseLeave={handleMouseLeaveHandle}
            />
            {/* Output Label - Only show on hover or when connecting */}
            {showLabel && (
              <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center justify-end pointer-events-none z-20">
                <span
                  className={`text-xs font-medium ${colors.labelColor} bg-white px-1 rounded shadow-sm`}
                >
                  {output.name}
                </span>
              </div>
            )}
          </div>
        )
      })}

      {/* Node Header */}
      <div className="text-sm font-semibold text-gray-800 mb-2 text-center">
        {nodeType.replace('Node', '')}
      </div>

      {/* Custom Node UI Container */}
      {isCustomNode && (
        <div ref={customUIRef} className="w-full flex justify-center items-center my-2" />
      )}

      {/* Node Properties - Show properties for nodes with fewer handles or important properties (only for non-custom nodes) */}
      {!isCustomNode && metadata.properties.length > 0 &&
        (maxHandles <= 3 ||
          metadata.properties.some((p: any) => p.name === 'type' || p.name === 'frequency')) && (
          <div className="space-y-1 mt-4">
            {metadata.properties.slice(0, maxHandles > 3 ? 1 : 2).map((prop: any) => (
              <div key={prop.name} className="text-xs text-gray-600 text-center">
                <span className="font-medium">{prop.name}:</span>{' '}
                <span className="text-gray-500">
                  {getPropertyValue(properties, prop.name)?.toString() ||
                    prop.defaultValue?.toString()}
                </span>
              </div>
            ))}
            {metadata.properties.length > (maxHandles > 3 ? 1 : 2) && (
              <div className="text-xs text-gray-400 text-center">
                +{metadata.properties.length - (maxHandles > 3 ? 1 : 2)} more...
              </div>
            )}
          </div>
        )}

      {/* Category Badge */}
      <div className="w-full flex justify-center mt-2">
        <span className="inline-block px-2 py-1 text-xs font-medium text-gray-600 bg-white rounded-full">
          {metadata.category}
        </span>
      </div>
    </div>
  )
}

export default AudioNode
